# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  dob: String
  email: String
  id: String!
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

type AccountAvgAggregate {
  pin: Float
}

type AccountCountAggregate {
  _all: Int!
  dob: Int!
  email: Int!
  id: Int!
  loginType: Int!
  password: Int!
  phoneNumber: Int!
  pin: Int!
}

input AccountCreateInput {
  dob: String
  email: String
  id: String
  kyc: KycCreateNestedOneWithoutAccountInput
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
  user: UserCreateNestedOneWithoutAccountInput
}

input AccountCreateManyInput {
  dob: String
  email: String
  id: String
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

input AccountCreateNestedOneWithoutKycInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutKycInput
  create: AccountCreateWithoutKycInput
}

input AccountCreateNestedOneWithoutUserInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutUserInput
  create: AccountCreateWithoutUserInput
}

input AccountCreateOrConnectWithoutKycInput {
  create: AccountCreateWithoutKycInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutKycInput {
  dob: String
  email: String
  id: String
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
  user: UserCreateNestedOneWithoutAccountInput
}

input AccountCreateWithoutUserInput {
  dob: String
  email: String
  id: String
  kyc: KycCreateNestedOneWithoutAccountInput
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  dob: String
  email: String
  id: String!
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

type AccountMaxAggregate {
  dob: String
  email: String
  id: String
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

type AccountMinAggregate {
  dob: String
  email: String
  id: String
  loginType: Login
  password: String
  phoneNumber: String
  pin: Int
}

input AccountOrderByInput {
  dob: SortOrder
  email: SortOrder
  id: SortOrder
  loginType: SortOrder
  password: SortOrder
  phoneNumber: SortOrder
  pin: SortOrder
}

input AccountPhoneNumberEmailCompoundUniqueInput {
  email: String!
  phoneNumber: String!
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

enum AccountScalarFieldEnum {
  dob
  email
  id
  loginType
  password
  phoneNumber
  pin
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  dob: StringNullableWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  loginType: EnumLoginNullableWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  phoneNumber: StringNullableWithAggregatesFilter
  pin: IntNullableWithAggregatesFilter
}

type AccountSumAggregate {
  pin: Int
}

input AccountUpdateInput {
  dob: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  kyc: KycUpdateOneWithoutAccountInput
  loginType: NullableEnumLoginFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  pin: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneWithoutAccountInput
}

input AccountUpdateManyMutationInput {
  dob: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  loginType: NullableEnumLoginFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  pin: NullableIntFieldUpdateOperationsInput
}

input AccountUpdateOneWithoutKycInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutKycInput
  create: AccountCreateWithoutKycInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutKycInput
  upsert: AccountUpsertWithoutKycInput
}

input AccountUpdateOneWithoutUserInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutUserInput
  create: AccountCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutUserInput
  upsert: AccountUpsertWithoutUserInput
}

input AccountUpdateWithoutKycInput {
  dob: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  loginType: NullableEnumLoginFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  pin: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneWithoutAccountInput
}

input AccountUpdateWithoutUserInput {
  dob: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  kyc: KycUpdateOneWithoutAccountInput
  loginType: NullableEnumLoginFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  pin: NullableIntFieldUpdateOperationsInput
}

input AccountUpsertWithoutKycInput {
  create: AccountCreateWithoutKycInput!
  update: AccountUpdateWithoutKycInput!
}

input AccountUpsertWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  dob: StringNullableFilter
  email: StringNullableFilter
  id: StringFilter
  kyc: KycRelationFilter
  loginType: EnumLoginNullableFilter
  password: StringNullableFilter
  phoneNumber: StringNullableFilter
  pin: IntNullableFilter
  user: UserRelationFilter
}

input AccountWhereUniqueInput {
  id: String
  phoneNumber_email: AccountPhoneNumberEmailCompoundUniqueInput
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateKyc {
  _count: KycCountAggregate
  _max: KycMaxAggregate
  _min: KycMinAggregate
}

type AggregateTempAccount {
  _avg: TempAccountAvgAggregate
  _count: TempAccountCountAggregate
  _max: TempAccountMaxAggregate
  _min: TempAccountMinAggregate
  _sum: TempAccountSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

input EnumLoginNullableFilter {
  equals: Login
  in: [Login!]
  not: NestedEnumLoginNullableFilter
  notIn: [Login!]
}

input EnumLoginNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumLoginNullableFilter
  _min: NestedEnumLoginNullableFilter
  equals: Login
  in: [Login!]
  not: NestedEnumLoginNullableWithAggregatesFilter
  notIn: [Login!]
}

input ForgotPasswordInput {
  dob: String
  email: String!
  panNumber: String
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Kyc {
  accountId: String!
  id: String!
  panNumber: String!
  uidNumber: String!
}

type KycCountAggregate {
  _all: Int!
  accountId: Int!
  id: Int!
  panNumber: Int!
  uidNumber: Int!
}

input KycCreateInput {
  account: AccountCreateNestedOneWithoutKycInput
  id: String
  panNumber: String!
  uidNumber: String!
}

input KycCreateInputT {
  email: String!
  id: String
  panNumber: String!
  uidNumber: String!
}

input KycCreateManyInput {
  accountId: String!
  id: String
  panNumber: String!
  uidNumber: String!
}

input KycCreateNestedOneWithoutAccountInput {
  connect: KycWhereUniqueInput
  connectOrCreate: KycCreateOrConnectWithoutAccountInput
  create: KycCreateWithoutAccountInput
}

input KycCreateOrConnectWithoutAccountInput {
  create: KycCreateWithoutAccountInput!
  where: KycWhereUniqueInput!
}

input KycCreateWithoutAccountInput {
  id: String
  panNumber: String!
  uidNumber: String!
}

type KycGroupBy {
  _count: KycCountAggregate
  _max: KycMaxAggregate
  _min: KycMinAggregate
  accountId: String!
  id: String!
  panNumber: String!
  uidNumber: String!
}

type KycMaxAggregate {
  accountId: String
  id: String
  panNumber: String
  uidNumber: String
}

type KycMinAggregate {
  accountId: String
  id: String
  panNumber: String
  uidNumber: String
}

input KycOrderByInput {
  accountId: SortOrder
  id: SortOrder
  panNumber: SortOrder
  uidNumber: SortOrder
}

input KycRelationFilter {
  is: KycWhereInput
  isNot: KycWhereInput
}

enum KycScalarFieldEnum {
  accountId
  id
  panNumber
  uidNumber
}

input KycScalarWhereWithAggregatesInput {
  AND: [KycScalarWhereWithAggregatesInput!]
  NOT: [KycScalarWhereWithAggregatesInput!]
  OR: [KycScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  panNumber: StringWithAggregatesFilter
  uidNumber: StringWithAggregatesFilter
}

input KycUpdateInput {
  account: AccountUpdateOneWithoutKycInput
  id: StringFieldUpdateOperationsInput
  panNumber: StringFieldUpdateOperationsInput
  uidNumber: StringFieldUpdateOperationsInput
}

input KycUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  panNumber: StringFieldUpdateOperationsInput
  uidNumber: StringFieldUpdateOperationsInput
}

input KycUpdateOneWithoutAccountInput {
  connect: KycWhereUniqueInput
  connectOrCreate: KycCreateOrConnectWithoutAccountInput
  create: KycCreateWithoutAccountInput
  delete: Boolean
  disconnect: Boolean
  update: KycUpdateWithoutAccountInput
  upsert: KycUpsertWithoutAccountInput
}

input KycUpdateWithoutAccountInput {
  id: StringFieldUpdateOperationsInput
  panNumber: StringFieldUpdateOperationsInput
  uidNumber: StringFieldUpdateOperationsInput
}

input KycUpsertWithoutAccountInput {
  create: KycCreateWithoutAccountInput!
  update: KycUpdateWithoutAccountInput!
}

input KycWhereInput {
  AND: [KycWhereInput!]
  NOT: [KycWhereInput!]
  OR: [KycWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  id: StringFilter
  panNumber: StringFilter
  uidNumber: StringFilter
}

input KycWhereUniqueInput {
  id: String
}

enum Login {
  APPLE
  EMAIL
  GOOGLE
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createKyc(data: KycCreateInput!): Kyc!
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyKyc(data: [KycCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTempAccount(data: [TempAccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createTempAccount(data: TempAccountCreateInput!): TempAccount!
  createUser(data: UserCreateInput!): User!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteKyc(where: KycWhereUniqueInput!): Kyc
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyKyc(where: KycWhereInput): AffectedRowsOutput!
  deleteManyTempAccount(where: TempAccountWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteTempAccount(where: TempAccountWhereUniqueInput!): TempAccount
  deleteUser(where: UserWhereUniqueInput!): User
  dob(data: AccountCreateInput!): Account!
  forgotPassword(data: ForgotPasswordInput!): Boolean!
  kycUpdate(data: KycCreateInputT!): Kyc!
  sendOtpTempAccounts(data: TempAccountCreateInput!): TempAccount!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateKyc(data: KycUpdateInput!, where: KycWhereUniqueInput!): Kyc
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyKyc(data: KycUpdateManyMutationInput!, where: KycWhereInput): AffectedRowsOutput!
  updateManyTempAccount(data: TempAccountUpdateManyMutationInput!, where: TempAccountWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updatePassword(data: AccountCreateInput!): Account!
  updatePin(data: AccountCreateInput!): Account!
  updateTempAccount(data: TempAccountUpdateInput!, where: TempAccountWhereUniqueInput!): TempAccount
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertKyc(create: KycCreateInput!, update: KycUpdateInput!, where: KycWhereUniqueInput!): Kyc!
  upsertTempAccount(create: TempAccountCreateInput!, update: TempAccountUpdateInput!, where: TempAccountWhereUniqueInput!): TempAccount!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  userDetails(data: UserCreateInput!): User!
  verifyEmail(data: TempAccountCreateInput!): Account!
  verifyPhoneNumber(data: TempAccountCreateInput!): Account!
}

input NestedEnumLoginNullableFilter {
  equals: Login
  in: [Login!]
  not: NestedEnumLoginNullableFilter
  notIn: [Login!]
}

input NestedEnumLoginNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumLoginNullableFilter
  _min: NestedEnumLoginNullableFilter
  equals: Login
  in: [Login!]
  not: NestedEnumLoginNullableWithAggregatesFilter
  notIn: [Login!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableEnumLoginFieldUpdateOperationsInput {
  set: Login
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateKyc(cursor: KycWhereUniqueInput, orderBy: [KycOrderByInput!], skip: Int, take: Int, where: KycWhereInput): AggregateKyc!
  aggregateTempAccount(cursor: TempAccountWhereUniqueInput, orderBy: [TempAccountOrderByInput!], skip: Int, take: Int, where: TempAccountWhereInput): AggregateTempAccount!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstKyc(cursor: KycWhereUniqueInput, distinct: [KycScalarFieldEnum!], orderBy: [KycOrderByInput!], skip: Int, take: Int, where: KycWhereInput): Kyc
  findFirstTempAccount(cursor: TempAccountWhereUniqueInput, distinct: [TempAccountScalarFieldEnum!], orderBy: [TempAccountOrderByInput!], skip: Int, take: Int, where: TempAccountWhereInput): TempAccount
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByKyc(by: [KycScalarFieldEnum!]!, having: KycScalarWhereWithAggregatesInput, orderBy: [KycOrderByInput!], skip: Int, take: Int, where: KycWhereInput): [KycGroupBy!]!
  groupByTempAccount(by: [TempAccountScalarFieldEnum!]!, having: TempAccountScalarWhereWithAggregatesInput, orderBy: [TempAccountOrderByInput!], skip: Int, take: Int, where: TempAccountWhereInput): [TempAccountGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  kyc(where: KycWhereUniqueInput!): Kyc
  kycs(cursor: KycWhereUniqueInput, distinct: [KycScalarFieldEnum!], orderBy: [KycOrderByInput!], skip: Int, take: Int, where: KycWhereInput): [Kyc!]!
  tempAccount(where: TempAccountWhereUniqueInput!): TempAccount
  tempAccounts(cursor: TempAccountWhereUniqueInput, distinct: [TempAccountScalarFieldEnum!], orderBy: [TempAccountOrderByInput!], skip: Int, take: Int, where: TempAccountWhereInput): [TempAccount!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type TempAccount {
  email: String
  id: String!
  otp: Int
  phoneNumber: String
}

type TempAccountAvgAggregate {
  otp: Float
}

type TempAccountCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  otp: Int!
  phoneNumber: Int!
}

input TempAccountCreateInput {
  email: String
  id: String
  otp: Int
  phoneNumber: String
}

input TempAccountCreateManyInput {
  email: String
  id: String
  otp: Int
  phoneNumber: String
}

type TempAccountGroupBy {
  _avg: TempAccountAvgAggregate
  _count: TempAccountCountAggregate
  _max: TempAccountMaxAggregate
  _min: TempAccountMinAggregate
  _sum: TempAccountSumAggregate
  email: String
  id: String!
  otp: Int
  phoneNumber: String
}

type TempAccountMaxAggregate {
  email: String
  id: String
  otp: Int
  phoneNumber: String
}

type TempAccountMinAggregate {
  email: String
  id: String
  otp: Int
  phoneNumber: String
}

input TempAccountOrderByInput {
  email: SortOrder
  id: SortOrder
  otp: SortOrder
  phoneNumber: SortOrder
}

enum TempAccountScalarFieldEnum {
  email
  id
  otp
  phoneNumber
}

input TempAccountScalarWhereWithAggregatesInput {
  AND: [TempAccountScalarWhereWithAggregatesInput!]
  NOT: [TempAccountScalarWhereWithAggregatesInput!]
  OR: [TempAccountScalarWhereWithAggregatesInput!]
  email: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  otp: IntNullableWithAggregatesFilter
  phoneNumber: StringNullableWithAggregatesFilter
}

type TempAccountSumAggregate {
  otp: Int
}

input TempAccountUpdateInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  otp: NullableIntFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
}

input TempAccountUpdateManyMutationInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  otp: NullableIntFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
}

input TempAccountWhereInput {
  AND: [TempAccountWhereInput!]
  NOT: [TempAccountWhereInput!]
  OR: [TempAccountWhereInput!]
  email: StringNullableFilter
  id: StringFilter
  otp: IntNullableFilter
  phoneNumber: StringNullableFilter
}

input TempAccountWhereUniqueInput {
  id: String
}

type User {
  accountId: String
  country: String!
  firstName: String!
  id: String!
  lastName: String!
}

type UserCountAggregate {
  _all: Int!
  accountId: Int!
  country: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
}

input UserCreateInput {
  account: AccountCreateNestedOneWithoutUserInput
  country: String
  firstName: String!
  id: String
  lastName: String!
}

input UserCreateManyInput {
  accountId: String
  country: String
  firstName: String!
  id: String
  lastName: String!
}

input UserCreateNestedOneWithoutAccountInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountInput
  create: UserCreateWithoutAccountInput
}

input UserCreateOrConnectWithoutAccountInput {
  create: UserCreateWithoutAccountInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountInput {
  country: String
  firstName: String!
  id: String
  lastName: String!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  accountId: String
  country: String!
  firstName: String!
  id: String!
  lastName: String!
}

type UserMaxAggregate {
  accountId: String
  country: String
  firstName: String
  id: String
  lastName: String
}

type UserMinAggregate {
  accountId: String
  country: String
  firstName: String
  id: String
  lastName: String
}

input UserOrderByInput {
  accountId: SortOrder
  country: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  accountId
  country
  firstName
  id
  lastName
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  accountId: StringNullableWithAggregatesFilter
  country: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
}

input UserUpdateInput {
  account: AccountUpdateOneWithoutUserInput
  country: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  country: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
}

input UserUpdateOneWithoutAccountInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountInput
  create: UserCreateWithoutAccountInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAccountInput
  upsert: UserUpsertWithoutAccountInput
}

input UserUpdateWithoutAccountInput {
  country: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountInput {
  create: UserCreateWithoutAccountInput!
  update: UserUpdateWithoutAccountInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  account: AccountRelationFilter
  accountId: StringNullableFilter
  country: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
}

input UserWhereUniqueInput {
  id: String
}
